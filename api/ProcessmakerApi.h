/**
 * ProcessMaker API
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * ProcessmakerApi.h
 * 
 * 
 */
 
#ifndef ProcessmakerApi_H_
#define ProcessmakerApi_H_


#include "ApiClient.h"

#include <cpprest/details/basic_types.h>
#include "ErrorArray.h"
#include "ClientItem.h"
#include "ClientCreateItem.h"
#include "EventItem.h"
#include "EventCreateItem.h"
#include "EventConnector_1.h"
#include "EventConnectorCreateItem.h"
#include "FlowCreateItem.h"
#include "FlowItem.h"
#include "GatewayItem.h"
#include "GatewayCreateItem.h"
#include "GroupCreateItem.h"
#include "GroupItem.h"
#include "ResultSuccess.h"
#include "TaskAddGroupsItem.h"
#include "InputOutputCreateItem.h"
#include "InputOutputItem.h"
#include "InstanceCreateItem.h"
#include "InstanceItem.h"
#include "ProcessItem.h"
#include "ProcessCreateItem.h"
#include "TaskItem.h"
#include "TaskCreateItem.h"
#include "TaskConnector_1.h"
#include "TaskConnectorCreateItem.h"
#include "UserItem.h"
#include "UserCreateItem.h"
#include "GroupAddUsersItem.h"
#include "TriggerEventCreateItem.h"
#include "DataModelItem_1.h"
#include "ClientCollection.h"
#include "EventConnectorsCollection.h"
#include "EventCollection.h"
#include "FlowCollection.h"
#include "GatewayCollection.h"
#include "GroupCollection.h"
#include "InputOutputCollection.h"
#include "InstanceCollection.h"
#include "ProcessCollection.h"
#include "TaskConnectorsCollection.h"
#include "Inline_response_200.h"
#include "TaskInstanceCollection.h"
#include "TaskCollection.h"
#include "UserCollection.h"
#include "BpmnImportItem.h"
#include "ProcessCollection_1.h"
#include "TaskRemoveGroupsItem.h"
#include "GroupRemoveUsersItem.h"
#include "TaskSyncGroupsItem.h"
#include "GroupSyncUsersItem.h"
#include "ClientUpdateItem.h"
#include "EventUpdateItem.h"
#include "EventConnectorUpdateItem.h"
#include "FlowUpdateItem.h"
#include "GatewayUpdateItem.h"
#include "GroupUpdateItem.h"
#include "InputOutputUpdateItem.h"
#include "InstanceUpdateItem.h"
#include "ProcessUpdateItem.h"
#include "TaskUpdateItem.h"
#include "TaskConnectorUpdateItem.h"
#include "TaskInstanceUpdateItem.h"
#include "UserUpdateItem.h"

namespace io {
namespace processmaker {
namespace pmio {
namespace api {

using namespace io::processmaker::pmio::model;

class  ProcessmakerApi
{
public:
    ProcessmakerApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~ProcessmakerApi();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method creates a new Oauth client for the user
    /// </remarks>
    /// <param name="userId">ID of the user related to the Oauth client</param>/// <param name="clientCreateItem">JSON API with the Oauth Client object to add</param>
    pplx::task<std::shared_ptr<ClientItem>> addClient(utility::string_t userId, std::shared_ptr<ClientCreateItem> clientCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method creates the new event.
    /// </remarks>
    /// <param name="processId">ID of the process related to the event</param>/// <param name="eventCreateItem">JSON API response with the Event object to add</param>
    pplx::task<std::shared_ptr<EventItem>> addEvent(utility::string_t processId, std::shared_ptr<EventCreateItem> eventCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for creating a new Event connector.
    /// </remarks>
    /// <param name="processId">ID of Process to fetch</param>/// <param name="eventId">ID of Event to fetch</param>/// <param name="eventConnectorCreateItem">JSON API with the EventConnector object to add</param>
    pplx::task<std::shared_ptr<EventConnector_1>> addEventConnector(utility::string_t processId, utility::string_t eventId, std::shared_ptr<EventConnectorCreateItem> eventConnectorCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method creates a new Sequence flow
    /// </remarks>
    /// <param name="processId">ID of the process related to the flow</param>/// <param name="flowCreateItem">JSON API response with the Flow object to add</param>
    pplx::task<std::shared_ptr<FlowItem>> addFlow(utility::string_t processId, std::shared_ptr<FlowCreateItem> flowCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method creates a new gateway.
    /// </remarks>
    /// <param name="processId">ID of the process related to the gateway</param>/// <param name="gatewayCreateItem">JSON API response with the gateway object to add</param>
    pplx::task<std::shared_ptr<GatewayItem>> addGateway(utility::string_t processId, std::shared_ptr<GatewayCreateItem> gatewayCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method creates a new group.
    /// </remarks>
    /// <param name="groupCreateItem">JSON API with the Group object to add</param>
    pplx::task<std::shared_ptr<GroupItem>> addGroup(std::shared_ptr<GroupCreateItem> groupCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method assigns group(s) to the choosen task
    /// </remarks>
    /// <param name="processId">Process ID</param>/// <param name="taskId">ID of task to be modified</param>/// <param name="taskAddGroupsItem">JSON API with Groups ID&#39;s to add</param>
    pplx::task<std::shared_ptr<ResultSuccess>> addGroupsToTask(utility::string_t processId, utility::string_t taskId, std::shared_ptr<TaskAddGroupsItem> taskAddGroupsItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method creates a new Input/Output object
    /// </remarks>
    /// <param name="processId">Process ID related to Input/Output object</param>/// <param name="taskId">Task instance ID related to Input/Output object</param>/// <param name="inputOutputCreateItem">Create and add a new Input/Output object with JSON API</param>
    pplx::task<std::shared_ptr<InputOutputItem>> addInputOutput(utility::string_t processId, utility::string_t taskId, std::shared_ptr<InputOutputCreateItem> inputOutputCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method creates a new instance.
    /// </remarks>
    /// <param name="processId">Process ID related to the nstance</param>/// <param name="instanceCreateItem">JSON API response with the Instance object to add</param>
    pplx::task<std::shared_ptr<InstanceItem>> addInstance(utility::string_t processId, std::shared_ptr<InstanceCreateItem> instanceCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method creates a new process
    /// </remarks>
    /// <param name="processCreateItem">JSON API response with the Process object to add</param>
    pplx::task<std::shared_ptr<ProcessItem>> addProcess(std::shared_ptr<ProcessCreateItem> processCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method creates a new task.
    /// </remarks>
    /// <param name="processId">Process ID related to the task</param>/// <param name="taskCreateItem">JSON API with the Task object to add</param>
    pplx::task<std::shared_ptr<TaskItem>> addTask(utility::string_t processId, std::shared_ptr<TaskCreateItem> taskCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for creating a new task connector.
    /// </remarks>
    /// <param name="processId">ID of Process to fetch</param>/// <param name="taskId">ID of Task to fetch</param>/// <param name="taskConnectorCreateItem">JSON API with the TaskConnector object to add</param>
    pplx::task<std::shared_ptr<TaskConnector_1>> addTaskConnector(utility::string_t processId, utility::string_t taskId, std::shared_ptr<TaskConnectorCreateItem> taskConnectorCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method creates a new user in the system.
    /// </remarks>
    /// <param name="userCreateItem">JSON API with the User object to add</param>
    pplx::task<std::shared_ptr<UserItem>> addUser(std::shared_ptr<UserCreateItem> userCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method adds one or more new users to a group.
    /// </remarks>
    /// <param name="id">ID of group to be modified</param>/// <param name="groupAddUsersItem">JSON API response with array of users ID&#39;s</param>
    pplx::task<std::shared_ptr<ResultSuccess>> addUsersToGroup(utility::string_t id, std::shared_ptr<GroupAddUsersItem> groupAddUsersItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method deletes an Oauth client using the client and user IDs.
    /// </remarks>
    /// <param name="userId">User ID</param>/// <param name="clientId">ID of client to delete</param>
    pplx::task<std::shared_ptr<ResultSuccess>> deleteClient(utility::string_t userId, utility::string_t clientId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method deletes an event using the event ID and process ID
    /// </remarks>
    /// <param name="processId">Process ID</param>/// <param name="eventId">ID of event to delete</param>
    pplx::task<std::shared_ptr<ResultSuccess>> deleteEvent(utility::string_t processId, utility::string_t eventId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for deleting a single Event connector based on Event ID, Process ID and Connector ID.
    /// </remarks>
    /// <param name="processId">ID of of Process item</param>/// <param name="eventId">ID of item to fetch</param>/// <param name="connectorId">ID of EventConnector to fetch</param>
    pplx::task<std::shared_ptr<ResultSuccess>> deleteEventConnector(utility::string_t processId, utility::string_t eventId, utility::string_t connectorId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method deletes a sequence flow using the flow ID and process ID.
    /// </remarks>
    /// <param name="processId">Process ID</param>/// <param name="flowId">ID of flow to delete</param>
    pplx::task<std::shared_ptr<ResultSuccess>> deleteFlow(utility::string_t processId, utility::string_t flowId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is deletes a single item using the gateway ID and process ID.
    /// </remarks>
    /// <param name="processId">Process ID</param>/// <param name="gatewayId">ID of Process to delete</param>
    pplx::task<std::shared_ptr<ResultSuccess>> deleteGateway(utility::string_t processId, utility::string_t gatewayId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method deletes a group using the group ID
    /// </remarks>
    /// <param name="id">ID of group to delete</param>
    pplx::task<std::shared_ptr<ResultSuccess>> deleteGroup(utility::string_t id);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method deletes the Input/Output based on the Input/Output ID, process ID and task ID.
    /// </remarks>
    /// <param name="processId">Process ID related to the Input/Output object</param>/// <param name="taskId">Task instance ID related to Input/Output object</param>/// <param name="inputoutputUid">Input/Output ID to fetch</param>
    pplx::task<std::shared_ptr<ResultSuccess>> deleteInputOutput(utility::string_t processId, utility::string_t taskId, utility::string_t inputoutputUid);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method deletes an instance using the instance ID and process ID.
    /// </remarks>
    /// <param name="processId">Process ID</param>/// <param name="instanceId">ID of instance to delete</param>
    pplx::task<std::shared_ptr<ResultSuccess>> deleteInstance(utility::string_t processId, utility::string_t instanceId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method deletes a process using the process ID.
    /// </remarks>
    /// <param name="id">Process ID to delete</param>
    pplx::task<std::shared_ptr<ResultSuccess>> deleteProcess(utility::string_t id);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method deletes a task using the task ID and process ID.
    /// </remarks>
    /// <param name="processId">Process ID</param>/// <param name="taskId">ID of task to delete</param>
    pplx::task<std::shared_ptr<ResultSuccess>> deleteTask(utility::string_t processId, utility::string_t taskId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for deleting a single Task connector based on Task ID, Process ID and Connector ID.
    /// </remarks>
    /// <param name="processId">ID of Process item to fetch</param>/// <param name="taskId">ID of Task item to fetch</param>/// <param name="connectorId">ID of TaskConnector to fetch</param>
    pplx::task<std::shared_ptr<ResultSuccess>> deleteTaskConnector(utility::string_t processId, utility::string_t taskId, utility::string_t connectorId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method deletes a user from the system.
    /// </remarks>
    /// <param name="id">ID of user to delete</param>
    pplx::task<std::shared_ptr<ResultSuccess>> deleteUser(utility::string_t id);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method starts/triggers an event.
    /// </remarks>
    /// <param name="processId">Process ID related to the event</param>/// <param name="eventId">ID of event to trigger</param>/// <param name="triggerEventCreateItem">Json with some parameters</param>
    pplx::task<std::shared_ptr<DataModelItem_1>> eventTrigger(utility::string_t processId, utility::string_t eventId, std::shared_ptr<TriggerEventCreateItem> triggerEventCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is retrieves an Oauth client based on its ID.
    /// </remarks>
    /// <param name="userId">ID of user to retrieve</param>/// <param name="clientId">ID of client to retrieve</param>
    pplx::task<std::shared_ptr<ClientItem>> findClientById(utility::string_t userId, utility::string_t clientId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method retrieves all existing clients belonging to an user.
    /// </remarks>
    /// <param name="userId">User ID related to the clients</param>/// <param name="pagefindProcessById">Page numbers to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of items per page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<ClientCollection>> findClients(utility::string_t userId, int32_t pagefindProcessById, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method returns the instance DataModel and lets the user work with it directly
    /// </remarks>
    /// <param name="processId">ID of process to return</param>/// <param name="instanceId">ID of instance to return</param>/// <param name="page">Page number to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<DataModelItem_1>> findDataModel(utility::string_t processId, utility::string_t instanceId, int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method retrieves an event using its ID.
    /// </remarks>
    /// <param name="processId">ID of process to return</param>/// <param name="eventId">ID of event to return</param>
    pplx::task<std::shared_ptr<EventItem>> findEventById(utility::string_t processId, utility::string_t eventId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method returns all Event connectors related to the run Process and Event.
    /// </remarks>
    /// <param name="processId">ID of Process to fetch</param>/// <param name="eventId">ID of Event to fetch</param>/// <param name="connectorId">ID of EventConnector to fetch</param>
    pplx::task<std::shared_ptr<EventConnector_1>> findEventConnectorById(utility::string_t processId, utility::string_t eventId, utility::string_t connectorId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method returns all Event connectors related to the run Process and Event.
    /// </remarks>
    /// <param name="processId">ID of Process to fetch</param>/// <param name="eventId">ID of Task to fetch</param>/// <param name="page">Page number to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<EventConnectorsCollection>> findEventConnectors(utility::string_t processId, utility::string_t eventId, int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method returns all events related to the runned process
    /// </remarks>
    /// <param name="processId">ID of process related to the event</param>/// <param name="page">Page numbers to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<EventCollection>> findEvents(utility::string_t processId, int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method retrieves a flow based on its ID.
    /// </remarks>
    /// <param name="processId">ID of process to return</param>/// <param name="flowId">ID of flow to return</param>
    pplx::task<std::shared_ptr<FlowItem>> findFlowById(utility::string_t processId, utility::string_t flowId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method retrieves all existing flows.
    /// </remarks>
    /// <param name="processId">ID of process related to the flow</param>/// <param name="page">Page numbers to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<FlowCollection>> findFlows(utility::string_t processId, int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method retrieves a gateway based on its ID.
    /// </remarks>
    /// <param name="processId">ID of process to return</param>/// <param name="gatewayId">ID of gateway to return</param>
    pplx::task<std::shared_ptr<GatewayItem>> findGatewayById(utility::string_t processId, utility::string_t gatewayId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method retrieves all existing gateways.
    /// </remarks>
    /// <param name="processId">ID of process related to the gateway</param>/// <param name="page">Page number to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of items per page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<GatewayCollection>> findGateways(utility::string_t processId, int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method retrieves a group using its ID.
    /// </remarks>
    /// <param name="id">ID of group to return</param>
    pplx::task<std::shared_ptr<GroupItem>> findGroupById(utility::string_t id);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method retrieves all existing groups.
    /// </remarks>
    /// <param name="page">Page number to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<GroupCollection>> findGroups(int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method retrieves an Input/Output object using its ID.
    /// </remarks>
    /// <param name="processId">Process ID related to the Input/Output object</param>/// <param name="taskId">Task instance ID related to the Input/Output object</param>/// <param name="inputoutputUid">ID of Input/Output to return</param>
    pplx::task<std::shared_ptr<InputOutputItem>> findInputOutputById(utility::string_t processId, utility::string_t taskId, utility::string_t inputoutputUid);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method retrieves all existing Input/Output objects in the related task instance.
    /// </remarks>
    /// <param name="processId">Process ID related to Input/Output object</param>/// <param name="taskId">Task instance ID related to Input/Output object</param>/// <param name="page">Page number to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of items per page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<InputOutputCollection>> findInputOutputs(utility::string_t processId, utility::string_t taskId, int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method retrieves an instance using its ID.
    /// </remarks>
    /// <param name="processId">ID of process to return</param>/// <param name="instanceId">ID of instance to return</param>
    pplx::task<std::shared_ptr<InstanceItem>> findInstanceById(utility::string_t processId, utility::string_t instanceId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method retrieves related to the process using  the Process ID
    /// </remarks>
    /// <param name="processId">Process ID related to the instances</param>/// <param name="page">Page number to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of items per page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<InstanceCollection>> findInstances(utility::string_t processId, int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method retrieves a process using its ID
    /// </remarks>
    /// <param name="id">ID of process to return</param>
    pplx::task<std::shared_ptr<ProcessItem>> findProcessById(utility::string_t id);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method retrieves all existing processes.
    /// </remarks>
    /// <param name="page">Page number to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of items per page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<ProcessCollection>> findProcesses(int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is retrieves a task using its ID.
    /// </remarks>
    /// <param name="processId">ID of process to return</param>/// <param name="taskId">ID of task to return</param>
    pplx::task<std::shared_ptr<TaskItem>> findTaskById(utility::string_t processId, utility::string_t taskId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for retrieving an Task connector based on it&#39;s ID.
    /// </remarks>
    /// <param name="processId">ID of Process to fetch</param>/// <param name="taskId">ID of Task to fetch</param>/// <param name="connectorId">ID of TaskConnector to fetch</param>
    pplx::task<std::shared_ptr<TaskConnector_1>> findTaskConnectorById(utility::string_t processId, utility::string_t taskId, utility::string_t connectorId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method returns all Task connectors related to the run Process and Task.
    /// </remarks>
    /// <param name="processId">ID of Process to fetch</param>/// <param name="taskId">ID of Task to fetch</param>/// <param name="page">Page number to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<TaskConnectorsCollection>> findTaskConnectors(utility::string_t processId, utility::string_t taskId, int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method retrieves a task instance based on its ID.
    /// </remarks>
    /// <param name="taskInstanceId">ID of task instance to return</param>/// <param name="page">Page number to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of items per page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<Inline_response_200>> findTaskInstanceById(utility::string_t taskInstanceId, int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method retrieves all existing task instances
    /// </remarks>
    /// <param name="page">Page number to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of items per page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<TaskInstanceCollection>> findTaskInstances(int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for returning a list of all Tasks related to the process
    /// </remarks>
    /// <param name="processId">ID of Process relative to task</param>/// <param name="page">Page number to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<TaskCollection>> findTasks(utility::string_t processId, int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method returns a user using its ID.
    /// </remarks>
    /// <param name="id">ID of the user to return</param>
    pplx::task<std::shared_ptr<UserItem>> findUserById(utility::string_t id);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method returs all existing users in the system.
    /// </remarks>
    /// <param name="page">Page number to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of items per page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<UserCollection>> findUsers(int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method imports BPMN files. A new process is created when import is successful.
    /// </remarks>
    /// <param name="bpmnImportItem">JSON API with the BPMN file to import</param>
    pplx::task<std::shared_ptr<ProcessCollection_1>> importBpmnFile(std::shared_ptr<BpmnImportItem> bpmnImportItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method returns user information using a token
    /// </remarks>
    /// <param name="page">Page number to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of items per page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<UserItem>> myselfUser(int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method removes groups from a task
    /// </remarks>
    /// <param name="processId">Process ID</param>/// <param name="taskId">Task ID</param>/// <param name="taskRemoveGroupsItem">JSON API response with Groups IDs to remove</param>
    pplx::task<std::shared_ptr<ResultSuccess>> removeGroupsFromTask(utility::string_t processId, utility::string_t taskId, std::shared_ptr<TaskRemoveGroupsItem> taskRemoveGroupsItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method removes one or more users from a group.
    /// </remarks>
    /// <param name="id">ID of group to be modified</param>/// <param name="groupRemoveUsersItem">JSON API response with Users IDs to remove</param>
    pplx::task<std::shared_ptr<ResultSuccess>> removeUsersFromGroup(utility::string_t id, std::shared_ptr<GroupRemoveUsersItem> groupRemoveUsersItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method synchronizes a one or more groups with a task.
    /// </remarks>
    /// <param name="processId">Process ID</param>/// <param name="taskId">ID of task to modify</param>/// <param name="taskSyncGroupsItem">JSON API response with groups IDs to sync</param>
    pplx::task<std::shared_ptr<ResultSuccess>> syncGroupsToTask(utility::string_t processId, utility::string_t taskId, std::shared_ptr<TaskSyncGroupsItem> taskSyncGroupsItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method synchronizes one or more users with a group.
    /// </remarks>
    /// <param name="id">ID of group to be modifieded</param>/// <param name="groupSyncUsersItem">JSON API with array of users IDs to sync</param>
    pplx::task<std::shared_ptr<ResultSuccess>> syncUsersToGroup(utility::string_t id, std::shared_ptr<GroupSyncUsersItem> groupSyncUsersItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method updates an existing Oauth client.
    /// </remarks>
    /// <param name="userId">ID of user to retrieve</param>/// <param name="clientId">ID of client to retrieve</param>/// <param name="clientUpdateItem">Client object to edit</param>
    pplx::task<std::shared_ptr<ClientItem>> updateClient(utility::string_t userId, utility::string_t clientId, std::shared_ptr<ClientUpdateItem> clientUpdateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method updates an existing event
    /// </remarks>
    /// <param name="processId">ID of process to retrieve</param>/// <param name="eventId">ID of event to retrieve</param>/// <param name="eventUpdateItem">Event object to edit</param>
    pplx::task<std::shared_ptr<EventItem>> updateEvent(utility::string_t processId, utility::string_t eventId, std::shared_ptr<EventUpdateItem> eventUpdateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method lets update the existing Event connector with new parameters values
    /// </remarks>
    /// <param name="processId">ID of Process to fetch</param>/// <param name="eventId">ID of Event to fetch</param>/// <param name="connectorId">ID of Event Connector to fetch</param>/// <param name="eventConnectorUpdateItem">EventConnector object to edit</param>
    pplx::task<std::shared_ptr<EventConnector_1>> updateEventConnector(utility::string_t processId, utility::string_t eventId, utility::string_t connectorId, std::shared_ptr<EventConnectorUpdateItem> eventConnectorUpdateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method updates an existing flow.
    /// </remarks>
    /// <param name="processId">ID of process to retrieve</param>/// <param name="flowId">ID of flow to retrieve</param>/// <param name="flowUpdateItem">Flow object to edit</param>
    pplx::task<std::shared_ptr<FlowItem>> updateFlow(utility::string_t processId, utility::string_t flowId, std::shared_ptr<FlowUpdateItem> flowUpdateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method updates an existing gateway.
    /// </remarks>
    /// <param name="processId">ID of process to retrieve</param>/// <param name="gatewayId">ID of gateway to retrieve</param>/// <param name="gatewayUpdateItem">Gateway object to edit</param>
    pplx::task<std::shared_ptr<GatewayItem>> updateGateway(utility::string_t processId, utility::string_t gatewayId, std::shared_ptr<GatewayUpdateItem> gatewayUpdateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method updates an existing group.
    /// </remarks>
    /// <param name="id">ID of group to retrieve</param>/// <param name="groupUpdateItem">Group object to edit</param>
    pplx::task<std::shared_ptr<GroupItem>> updateGroup(utility::string_t id, std::shared_ptr<GroupUpdateItem> groupUpdateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method updates an existing Input/Output object.
    /// </remarks>
    /// <param name="processId">Process ID related to the Input/Output object</param>/// <param name="taskId">Task instance ID related to the Input/Output object</param>/// <param name="inputoutputUid">ID of Input/Output to retrieve</param>/// <param name="inputOutputUpdateItem">Input/Output object to edit</param>
    pplx::task<std::shared_ptr<InputOutputItem>> updateInputOutput(utility::string_t processId, utility::string_t taskId, utility::string_t inputoutputUid, std::shared_ptr<InputOutputUpdateItem> inputOutputUpdateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method updates  an existing instance.
    /// </remarks>
    /// <param name="processId">ID of Process to retrieve</param>/// <param name="instanceId">ID of Instance to retrieve</param>/// <param name="instanceUpdateItem">Instance object to edit</param>
    pplx::task<std::shared_ptr<InstanceItem>> updateInstance(utility::string_t processId, utility::string_t instanceId, std::shared_ptr<InstanceUpdateItem> instanceUpdateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method updates an existing process.
    /// </remarks>
    /// <param name="id">ID of process to retrieve</param>/// <param name="processUpdateItem">Process object to edit</param>
    pplx::task<std::shared_ptr<ProcessItem>> updateProcess(utility::string_t id, std::shared_ptr<ProcessUpdateItem> processUpdateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for updating an existing task.
    /// </remarks>
    /// <param name="processId">ID of Process to fetch</param>/// <param name="taskId">ID of Task to fetch</param>/// <param name="taskUpdateItem">Task object to edit</param>
    pplx::task<std::shared_ptr<TaskItem>> updateTask(utility::string_t processId, utility::string_t taskId, std::shared_ptr<TaskUpdateItem> taskUpdateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method lets update the existing Task connector with new parameters values
    /// </remarks>
    /// <param name="processId">ID of Process to fetch</param>/// <param name="taskId">ID of Task to fetch</param>/// <param name="connectorId">ID of Task Connector to fetch</param>/// <param name="taskConnectorUpdateItem">TaskConnector object to edit</param>
    pplx::task<std::shared_ptr<TaskConnector_1>> updateTaskConnector(utility::string_t processId, utility::string_t taskId, utility::string_t connectorId, std::shared_ptr<TaskConnectorUpdateItem> taskConnectorUpdateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method updates an existing task instance.
    /// </remarks>
    /// <param name="taskInstanceId">ID of task instance to retrieve</param>/// <param name="taskInstanceUpdateItem">Task Instance object to update</param>
    pplx::task<std::shared_ptr<Inline_response_200>> updateTaskInstance(utility::string_t taskInstanceId, std::shared_ptr<TaskInstanceUpdateItem> taskInstanceUpdateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method updates an existing user.
    /// </remarks>
    /// <param name="id">ID of user to retrieve</param>/// <param name="userUpdateItem">User object for update</param>
    pplx::task<std::shared_ptr<UserItem>> updateUser(utility::string_t id, std::shared_ptr<UserUpdateItem> userUpdateItem);
    
protected:
    std::shared_ptr<ApiClient> m_ApiClient;    
};
    
}
}
}
}

#endif /* ProcessmakerApi_H_ */

