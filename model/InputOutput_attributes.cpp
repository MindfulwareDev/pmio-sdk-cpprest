/**
 * ProcessMaker API
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "InputOutput_attributes.h"

namespace io {
namespace processmaker {
namespace pmio {
namespace model {

InputOutput_attributes::InputOutput_attributes()
{
    m_Created_at = U("");
    m_Created_atIsSet = false;
    m_Updated_at = U("");
    m_Updated_atIsSet = false;
    
}

InputOutput_attributes::~InputOutput_attributes()
{
}

void InputOutput_attributes::validate() 
{
    // TODO: implement validation
}

web::json::value InputOutput_attributes::toJson() const
{
    web::json::value val = web::json::value::object();
     
	val[U("input_parameters")] = ModelBase::toJson(m_Input_parameters);
    val[U("output_parameters")] = ModelBase::toJson(m_Output_parameters);
    if(m_Created_atIsSet)
    {
        val[U("created_at")] = ModelBase::toJson(m_Created_at);
    }
    if(m_Updated_atIsSet)
    {
        val[U("updated_at")] = ModelBase::toJson(m_Updated_at);
    }
    

    return val;
}

void InputOutput_attributes::fromJson(web::json::value& val)
{
    std::shared_ptr<Object> newInput_parameters(nullptr);
    newInput_parameters->fromJson(val[U("input_parameters")]);
    setInputParameters( newItem );
    std::shared_ptr<Object> newOutput_parameters(nullptr);
    newOutput_parameters->fromJson(val[U("output_parameters")]);
    setOutputParameters( newItem );
    if(val.has_field(U("created_at")))
    {
        setCreatedAt(ModelBase::stringFromJson(val[U("created_at")]));
                
    }
    if(val.has_field(U("updated_at")))
    {
        setUpdatedAt(ModelBase::stringFromJson(val[U("updated_at")]));
                
    }
    
}

void InputOutput_attributes::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

	m_Input_parameters->toMultipart(multipart, U("input_parameters."));
    m_Output_parameters->toMultipart(multipart, U("output_parameters."));
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("created_at"), m_Created_at));
                
    }
    if(m_Updated_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("updated_at"), m_Updated_at));
                
    }
    
}

void InputOutput_attributes::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

    std::shared_ptr<Object> newInput_parameters(nullptr);
    newInput_parameters->fromMultiPart(multipart, U("input_parameters."));
    setInputParameters( newInput_parameters );
    std::shared_ptr<Object> newOutput_parameters(nullptr);
    newOutput_parameters->fromMultiPart(multipart, U("output_parameters."));
    setOutputParameters( newOutput_parameters );
    if(multipart->hasContent(U("created_at")))
    {
        setCreatedAt(ModelBase::stringFromHttpContent(multipart->getContent(U("created_at"))));
                
    }
    if(multipart->hasContent(U("updated_at")))
    {
        setUpdatedAt(ModelBase::stringFromHttpContent(multipart->getContent(U("updated_at"))));
                
    }
    
}
    
   
std::shared_ptr<Object> InputOutput_attributes::getInputParameters() const
{
	return m_Input_parameters;
}
void InputOutput_attributes::setInputParameters(std::shared_ptr<Object> value)
{
	m_Input_parameters = value;
    
}
std::shared_ptr<Object> InputOutput_attributes::getOutputParameters() const
{
	return m_Output_parameters;
}
void InputOutput_attributes::setOutputParameters(std::shared_ptr<Object> value)
{
	m_Output_parameters = value;
    
}
utility::string_t InputOutput_attributes::getCreatedAt() const
{
	return m_Created_at;
}
void InputOutput_attributes::setCreatedAt(utility::string_t value)
{
	m_Created_at = value;
    m_Created_atIsSet = true;
}
bool InputOutput_attributes::created_atIsSet() const
{
    return m_Created_atIsSet;
}
void InputOutput_attributes::unsetCreated_at() 
{
    m_Created_atIsSet = false;
}
utility::string_t InputOutput_attributes::getUpdatedAt() const
{
	return m_Updated_at;
}
void InputOutput_attributes::setUpdatedAt(utility::string_t value)
{
	m_Updated_at = value;
    m_Updated_atIsSet = true;
}
bool InputOutput_attributes::updated_atIsSet() const
{
    return m_Updated_atIsSet;
}
void InputOutput_attributes::unsetUpdated_at() 
{
    m_Updated_atIsSet = false;
}

}
}
}
}

